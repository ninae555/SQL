use ap;
DROP PROCEDURE IF EXISTS insert_glaccount;
DELIMITER //

create procedure insert_glaccount
(
	account_number_param       int,
    account_description_param  varchar(50)
)
begin
 
 start transaction;
 
 insert into general_ledger_accounts 
	(account_number, account_description)
    VALUES
    (account_number_param, account_description_param);
    
    end //
    
delimiter ;
    
 call insert_glaccount(700, 'txt');
 call insert_glaccount(700, 'Cash'); -- description and id must be unique
 delete from general_ledger_accounts where account_number = 1123;
 delete from general_ledger_accounts where account_number = 700;
 -- Question 2
 
 
 select * 
 from general_ledger_accounts
 order by account_number;
 
delimiter //
 
 create function test_glaccount_description 
 ( 
 account_description_param varchar(50) -- something you pass/variable is something you store
 )
 returns int 
 deterministic reads sql data 
 begin
	declare account_number_var  int; -- how to choose the right variable 
   
    select account_number
    into account_number_var
    from general_ledger_accounts
    where account_descrption = account_description_param;
    
    if account_description_var is not null then 
		return true;
	else
		return false;
	end if;
     
    end//
    
    delimiter ;
    
    -- Test success: 
SELECT test_glaccounts_description('Book Inventory') AS message;

-- Test fail: 
SELECT test_glaccounts_description('Fail') AS message;


    /* Chapter 16 */
    -- error when payment_total + credit_total > invoice_total for each row 
    -- test with update statement


DELIMITER //
CREATE TRIGGER invoices_before_update
 BEFORE UPDATE ON invoices FOR EACH ROW
BEGIN DECLARE sum_payment_credit DECIMAL(9,2);

SELECT sum(payment_total + credit_total) 
INTO sum_payment_credit 
FROM invoices
WHERE invoice_id = NEW.invoice_id;

IF sum_payment_credit > NEW.invoice_total THEN 
SIGNAL SQLSTATE 'HY000'
SET MESSAGE_TEXT = 'Sum of Payment Total and Credit total must not be greater than invoice total.'; 
END IF; 
END//    
delimiter ;
drop trigger if exists invoices_before_update;
 

-- Question 1
-- create trigger invoices_after_update
-- insert old data into invoice_aduit table after update
-- test with update
-- crate invoices_audit table


create table invoices_audit
 (
	vendor_id		int				not null,
	invoice_number  varchar(50)		not null, 
    invoice_total 	decimal(9,5)	not null,
    action_type 	varchar(50) 	not null,
    action_date 	datetime 		not null
    );
    
drop trigger if exists invoices_after_update;
delimiter //

create trigger invoices_after_update
	before update on invoices 
    for each row
begin
	insert into invoices_audit values
    (old.vendor_id, old.invoice_number, old.invoice_total, 'updated', NOW());
    end //
delimiter ;
    

UPDATE invoices
SET payment_total = 100
WHERE invoice_id = 112;

SELECT * FROM invoices_audit;


UPDATE invoices
SET payment_total = 0;



update invoices
set invoice_total = 0 
where invoice_id = 115;

select * 
from invoices_audit;

delete from invoices where invoice_id = 115;


